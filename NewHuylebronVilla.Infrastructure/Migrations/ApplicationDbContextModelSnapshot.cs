// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewHuylebronVilla.Infrastructure.Data;

#nullable disable

namespace NewHuylebronVilla.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NewHuylebronVilla.Domain.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VillaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VillaId");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hồ bơi riêng",
                            VillaId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lò vi sóng",
                            VillaId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ban công riêng",
                            VillaId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "1 giường King và 1 ghế sofa giường",
                            VillaId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hồ bơi riêng biệt",
                            VillaId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Lò vi sóng & tủ lạnh mini",
                            VillaId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ban công riêng hướng vườn",
                            VillaId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "1 giường King hoặc 2 giường đôi",
                            VillaId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hồ bơi vô cực",
                            VillaId = 3
                        },
                        new
                        {
                            Id = 10,
                            Name = "Bồn tắm Jacuzzi",
                            VillaId = 3
                        },
                        new
                        {
                            Id = 11,
                            Name = "Ban công riêng hướng biển",
                            VillaId = 3
                        },
                        new
                        {
                            Id = 12,
                            Name = "Phòng tắm lộ thiên",
                            VillaId = 4
                        },
                        new
                        {
                            Id = 13,
                            Name = "Quầy bar mini",
                            VillaId = 4
                        },
                        new
                        {
                            Id = 14,
                            Name = "Sân vườn rộng rãi",
                            VillaId = 5
                        },
                        new
                        {
                            Id = 15,
                            Name = "Khu vực BBQ ngoài trời",
                            VillaId = 5
                        },
                        new
                        {
                            Id = 16,
                            Name = "Lò sưởi",
                            VillaId = 6
                        },
                        new
                        {
                            Id = 17,
                            Name = "Ghế massage thư giãn",
                            VillaId = 6
                        },
                        new
                        {
                            Id = 18,
                            Name = "Rạp chiếu phim riêng",
                            VillaId = 7
                        },
                        new
                        {
                            Id = 19,
                            Name = "Bể sục nước nóng ngoài trời",
                            VillaId = 7
                        },
                        new
                        {
                            Id = 20,
                            Name = "Thuyền kayak riêng",
                            VillaId = 8
                        },
                        new
                        {
                            Id = 21,
                            Name = "Ghế dài tắm nắng cạnh hồ",
                            VillaId = 8
                        });
                });

            modelBuilder.Entity("NewHuylebronVilla.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NewHuylebronVilla.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActualCheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActualCheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPaymentSuccessful")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nights")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripePaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VillaId")
                        .HasColumnType("int");

                    b.Property<int>("VillaNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VillaId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("NewHuylebronVilla.Domain.Entities.Villa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Occupancy")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Sqft")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Villas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Một không gian sang trọng với thiết kế đẳng cấp, mang lại sự thoải mái và tiện nghi tối đa. Hoàn hảo cho kỳ nghỉ thư giãn và tận hưởng không gian yên bình.",
                            ImageUrl = "https://placehold.co/600x400",
                            Name = "Biệt Thự Hoàng Gia",
                            Occupancy = 4,
                            Price = 250.0,
                            Sqft = 600
                        },
                        new
                        {
                            Id = 2,
                            Description = "Trải nghiệm đẳng cấp với hồ bơi riêng, không gian rộng rãi và đầy đủ tiện nghi. Lựa chọn hoàn hảo cho gia đình hoặc nhóm bạn cùng tận hưởng kỳ nghỉ lý tưởng.",
                            ImageUrl = "https://placehold.co/600x401",
                            Name = "Biệt Thự Hồ Bơi Cao Cấp",
                            Occupancy = 4,
                            Price = 350.0,
                            Sqft = 700
                        },
                        new
                        {
                            Id = 3,
                            Description = "Không gian nghỉ dưỡng tuyệt vời với bể bơi riêng, ban công hướng biển và nội thất hiện đại. Đem đến trải nghiệm xa hoa và thư giãn tuyệt đối.",
                            ImageUrl = "https://placehold.co/600x402",
                            Name = "Biệt Thự Hồ Bơi Sang Trọng",
                            Occupancy = 4,
                            Price = 500.0,
                            Sqft = 900
                        },
                        new
                        {
                            Id = 4,
                            Description = "Thiết kế mở đón ánh nắng tự nhiên, tầm nhìn tuyệt đẹp ra biển xanh. Lý tưởng cho kỳ nghỉ trọn vẹn bên gia đình và bạn bè.",
                            ImageUrl = "https://placehold.co/600x403",
                            Name = "Biệt Thự Ven Biển",
                            Occupancy = 6,
                            Price = 600.0,
                            Sqft = 1000
                        },
                        new
                        {
                            Id = 5,
                            Description = "Một không gian xanh mát giữa thiên nhiên, kết hợp hồ bơi và khu vườn nhiệt đới riêng tư.",
                            ImageUrl = "https://placehold.co/600x404",
                            Name = "Biệt Thự Nhiệt Đới",
                            Occupancy = 5,
                            Price = 450.0,
                            Sqft = 800
                        },
                        new
                        {
                            Id = 6,
                            Description = "Nằm giữa núi đồi hùng vĩ, căn biệt thự mang lại không gian nghỉ dưỡng yên bình với không khí trong lành.",
                            ImageUrl = "https://placehold.co/600x405",
                            Name = "Biệt Thự Cao Nguyên",
                            Occupancy = 4,
                            Price = 380.0,
                            Sqft = 750
                        },
                        new
                        {
                            Id = 7,
                            Description = "Hòa mình vào thiên nhiên với hồ bơi vô cực và nội thất hiện đại, sang trọng bậc nhất.",
                            ImageUrl = "https://placehold.co/600x406",
                            Name = "Biệt Thự Thiên Đường",
                            Occupancy = 6,
                            Price = 750.0,
                            Sqft = 1200
                        },
                        new
                        {
                            Id = 8,
                            Description = "Biệt thự nằm ngay cạnh hồ lớn, không gian thoáng mát với khu vực thư giãn ngoài trời tuyệt đẹp.",
                            ImageUrl = "https://placehold.co/600x407",
                            Name = "Biệt Thự Mặt Hồ",
                            Occupancy = 5,
                            Price = 500.0,
                            Sqft = 900
                        });
                });

            modelBuilder.Entity("NewHuylebronVilla.Domain.Entities.VillaNumber", b =>
                {
                    b.Property<int>("Villa_Number")
                        .HasColumnType("int");

                    b.Property<string>("SpecialDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VillaId")
                        .HasColumnType("int");

                    b.HasKey("Villa_Number");

                    b.HasIndex("VillaId");

                    b.ToTable("VillaNumbers");

                    b.HasData(
                        new
                        {
                            Villa_Number = 101,
                            VillaId = 1
                        },
                        new
                        {
                            Villa_Number = 102,
                            VillaId = 1
                        },
                        new
                        {
                            Villa_Number = 103,
                            VillaId = 1
                        },
                        new
                        {
                            Villa_Number = 104,
                            VillaId = 1
                        },
                        new
                        {
                            Villa_Number = 201,
                            VillaId = 2
                        },
                        new
                        {
                            Villa_Number = 202,
                            VillaId = 2
                        },
                        new
                        {
                            Villa_Number = 203,
                            VillaId = 2
                        },
                        new
                        {
                            Villa_Number = 301,
                            VillaId = 3
                        },
                        new
                        {
                            Villa_Number = 302,
                            VillaId = 3
                        },
                        new
                        {
                            Villa_Number = 401,
                            VillaId = 4
                        },
                        new
                        {
                            Villa_Number = 402,
                            VillaId = 4
                        },
                        new
                        {
                            Villa_Number = 501,
                            VillaId = 5
                        },
                        new
                        {
                            Villa_Number = 502,
                            VillaId = 5
                        },
                        new
                        {
                            Villa_Number = 601,
                            VillaId = 6
                        },
                        new
                        {
                            Villa_Number = 602,
                            VillaId = 6
                        },
                        new
                        {
                            Villa_Number = 701,
                            VillaId = 7
                        },
                        new
                        {
                            Villa_Number = 702,
                            VillaId = 7
                        },
                        new
                        {
                            Villa_Number = 801,
                            VillaId = 8
                        },
                        new
                        {
                            Villa_Number = 802,
                            VillaId = 8
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NewHuylebronVilla.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NewHuylebronVilla.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewHuylebronVilla.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NewHuylebronVilla.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewHuylebronVilla.Domain.Entities.Amenity", b =>
                {
                    b.HasOne("NewHuylebronVilla.Domain.Entities.Villa", "Villa")
                        .WithMany("VillaAmenity")
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("NewHuylebronVilla.Domain.Entities.Booking", b =>
                {
                    b.HasOne("NewHuylebronVilla.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewHuylebronVilla.Domain.Entities.Villa", "Villa")
                        .WithMany()
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("NewHuylebronVilla.Domain.Entities.VillaNumber", b =>
                {
                    b.HasOne("NewHuylebronVilla.Domain.Entities.Villa", "Villa")
                        .WithMany()
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("NewHuylebronVilla.Domain.Entities.Villa", b =>
                {
                    b.Navigation("VillaAmenity");
                });
#pragma warning restore 612, 618
        }
    }
}
